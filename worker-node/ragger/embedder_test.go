package ragger

import (
	"math/rand"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/sugarme/tokenizer/pretrained"
)

var (
	modelPath     = filepath.Join("..", "model", "model.onnx")
	libraryPath   = filepath.Join("..", "libonnxruntime.so.1.20.1")
	tokenizerPath = filepath.Join("..", "model", "tokenizer.json")
)

var (
	embeddingMap = map[string][]float32{
		"Hello there my name is Ethan": {-0.7371083, -0.33953023, 0.4710324, -0.44631422, 0.082147196, 0.0038032904, 0.53500473, 0.10189656, 0.27887338, -0.35683572, -0.4813884, -0.26542294, 0.04565328, -0.21898234, 0.059165496, 0.12941724, -0.30571568, -0.21456471, -0.823956, -0.0795387, 0.06999819, 0.081433505, 0.055540487, 0.00316865, -0.022748716, -0.27633727, -0.013991788, 0.048820406, 0.34237123, -0.87020206, 0.38648486, -0.35669178, -0.0036302432, -0.1315352, 0.31529006, -0.2114464, 0.28844613, 0.23615146, -0.49798733, -0.06458835, 0.44555944, -0.5181185, 0.25372106, -0.5250851, 0.8335695, -0.2056551, 0.30779102, 0.23749498, 0.555789, -0.0030625388, -0.19530988, -0.20030656, -0.36736488, 0.37568113, -0.01084844, 0.71352553, 0.6191978, -0.06959589, 0.0843168, 0.18831673, 0.5846168, 0.35861632, -1.2718602, 0.87818265, -0.42183828, 0.42762637, -0.008970022, -0.4266576, -0.20236552, 0.3230369, 0.021566942, -0.03752666, -0.047386795, 0.39352563, -0.009376541, -0.07945251, 0.32358253, -0.13470703, -0.13106605, -0.53454643, 0.010004014, -0.095745265, 0.052525744, -0.14082968, -0.1230437, 0.4413466, 0.40948793, 0.5486474, -0.43618047, -0.18471701, -0.14126092, -0.43721735, 0.34861454, 0.41461942, -0.67270774, -0.7045096, -0.17346635, 0.04058049, -0.6336911, 3.589619, -0.62697554, -0.25125054, -0.16351026, -0.72428, -0.02071964, 0.17231819, -0.23709859, -0.13678735, 0.048414476, -0.06306752, -0.0072922483, 0.2782111, 0.10521929, -0.36451966, -0.01235456, 0.15590416, 0.5686393, 0.20229556, 0.36580974, -0.26440427, 0.55481184, 0.8183928, -0.5118985, 0.35996193, -0.45686924, -0.26083598, 0.5698904, 0.5204383, 0.068125166, 0.03498084, 0.3207544, 0.20885593, -0.23137794, -0.5507941, -0.045393866, 0.315662, -0.04659293, -0.19921789, 0.11608525, -0.06971948, -0.2874676, -0.11405022, -0.9949402, -0.19438827, -0.018315304, -0.22898263, -0.093382575, 0.026087493, -0.31376812, 0.17113766, -0.014209226, -0.08757767, -0.07145463, -0.17098096, -0.34899977, -0.09570603, 0.5682286, 0.3205248, 0.025160402, 0.64385283, 0.24265379, 0.060488015, 0.11156991, -0.20512214, -0.4501964, -1.1637919, 0.21699545, 0.68011355, 0.038174536, 0.42714077, 0.36726755, 0.15058202, -0.2815506, 0.65327835, 0.82997435, 0.07461053, -0.33194816, 0.25360894,
			-0.363052, 0.1394368, 0.4134022, -0.83739114, -0.11664605, -0.19223306, 0.33096087, -0.4188806, 0.17426379, -0.15344347, 0.119721785, 0.5016788, 0.051843546, 0.53247607, -0.018168084, -0.44544277, -0.5681903, 0.11201443, 0.09496458, -0.36713934, 0.40573415, -0.118018426, 0.6109375, 0.34415367, 0.3281061, 0.24189378, 0.1212376, 0.012980834, -0.021072194, -0.67066395, 0.3840653, -0.23749056, -0.20914724, -0.012614658, 0.1132279, -0.0044140927, 0.08773321, -0.3975761, 0.3747347, 0.6166305, -0.058224946, 0.12830514, 0.14264187, 0.08704522, -0.35610878, -2.6751077, 0.2202259, 0.14855258, 0.1471121, -0.17477256, -0.29131234, 0.37129453, -0.21957444, 0.9602557, 0.031239413, 0.19521552, -0.4906708, -0.4261062, 0.065824956, 0.1579365, -0.12884858, 0.5336782, -0.3031466, 0.3526363, 0.18674918, 0.034655243, 0.28234696, -0.17752591, -0.39828888, -0.44421476, 0.060557768, 1.4345269, 1.188495, 0.13800277, 0.06986679, 0.6047819, -0.49154204, 0.35816404, -1.1654655, 0.456258, 0.3205406, 0.29950225, -1.0532002, -0.16412148, -0.62065, -0.9514072, -0.2711502, -0.028028697, -0.67317295, -0.008549711, -0.82424706, -0.7320623, 0.0521609, -0.62264836, 0.19892596, 0.53261423, -0.35471013, 0.29301932, 0.09287914, -0.07711689, -0.5645454, -0.23006335, -0.029512338, 0.24606597, 0.29571885, -0.09130871, 0.32978716, -0.41117325, 0.011044949, -0.1682714, 0.24540962, -0.09862276, -0.13429235, 0.26213712, -0.4584706, -0.42817062, -0.6692735, -0.18579458, 0.1380352, 0.2882346, -0.3396123, -0.2271592, -0.2216945, -0.24871172, -0.5774388, -0.52048826, -0.16664776, 0.6489279, -0.18986991, -0.025619693, 0.27829182, 0.7161733, 0.46468392, 0.41973764, -0.3562745, -0.021241385, 0.58452713, 0.39471477, -0.65785277, 0.23934656, -0.08704911, -2.025134, 0.3224011, -0.27545562, 0.5145302, 0.05680673, 0.38237634, 0.8613477, 0.07616581, -0.2648062, -0.20895956, -0.14477545, 0.0033440366, -0.010661781, 0.1348692, -0.16416423, 0.613188, 0.10469018, -0.22725788, -0.82682216, 0.08222301, 0.5968984, -0.026090436, 1.7337804, -0.52097285, 0.6636088, 0.6447435, -0.20011064, 0.7564439, 0.32332873, -0.5600938, -0.15743618, 0.045094024, -0.18670133, -0.23323913, 0.40339023, -0.36071134, -0.0723481, -0.2771949, 0.026416294, -0.065069154, 0.07885219, 0.2369361, -0.122682914, 0.76668745, 0.5740242, -0.17811471, -0.16857013, 0.42879558, -0.42272314, 0.06717678, -0.35524574, -0.17195708, -0.10634394, 0.4261124, 0.111019045, -0.05819796, 0.18952093, -0.16661161, 0.23636451, -0.28361458, -0.37713593, 0.29162866, 0.49042565, 0.07551518, 0.13937782},
		"yeah mate idk hopefully works": {-0.59973156, -0.32755864, 0.20108894, -0.22774291, 0.39414907, -0.4308181, -0.0033692867, 0.2505197, 0.1732475, -0.15234762, -0.08095749, -0.7280214, 0.04233964, 0.5011942, 0.38585797, 0.32847217, 0.21405327, -0.53177935, -0.3016311, 0.27839914, -0.30078897, 0.5337459, -0.5071479, -0.18990104, -0.46299726, 0.4841868, 0.5712916, -0.052219145, 0.18738055, -0.77813303, 0.022232816, 0.015251979, -0.11399701, -0.12736471, 0.08952312, -0.30614984, -0.30964985, -0.64974946, -0.67761827, -0.2573425, 0.8065607, -0.11915654, -0.43304387, -0.2184456, 0.58380175, 0.28752762, -0.04067686, 0.18337509, 0.4152722, -0.56638026, 0.33104336, 0.057754204, 0.03848163, -0.26676115, 0.1992373, 0.84901047, 0.12120226, 0.09341148, 0.055811055, -0.09934053, 0.045475725, 0.2352402, -0.9683407, 0.028772138, 0.7278027, 0.16220726, -0.3268184, -0.59082425, 0.49166384, 0.6926382, -0.14638878, 0.28547204, -0.3282285, 0.44886482, -0.10869202, -0.13092992, 0.10029838, -0.4370181, -0.10966725, -0.20840538, -0.52823764, -0.27529705, -0.20028162, 0.23663813, -0.27127826, -0.19773217, 0.28497744, 0.45775664, -0.32538936, -0.18720591, 0.13647541, 0.45323396, -0.23044086, 0.3002259, 0.08133268, 0.49771148, -0.007954262, 0.1601493, -0.4334543, 3.2583795, 0.38859588, 0.051485, 0.5147759, -0.3392945, 0.048418034, 0.012861371, -0.6375931, -0.061642922, 0.20029113, -0.25920948, -0.23995942, 0.109944016, -0.09104781, 0.3113049, -0.5745698, 0.5602999, 0.096723825, 0.3158825, -0.33157274, -0.7659382, -0.16378072, 0.03435951, -0.21014106, 0.25924897, 0.19511743, 0.6200906, 0.38518715, 0.575636, 0.09261006, -0.032466203, 0.03135387, -0.6014716, -0.36017948, -0.21272829, -0.21125974, -0.056627035, -0.01881715, 0.5507259, -0.23307613, 0.09785575, -0.04310456, -0.66245294, -0.079844914, -0.779228, -0.011844501, 0.2908725, 0.23433596, 0.25994137, 0.3315577, -0.5221885, 0.82953507, 0.27717268, 0.1194572, -0.42831433, 0.05958549, -0.6897062, 0.60066754, -0.32236075, -0.20251223, 0.52402383, -0.19678271, -0.4028252, -0.39292622, -0.308681, -0.28619704, -0.46166, -0.13392898, 0.4234502, 0.4085695, 0.015470505, 0.37899613, 0.2712693, 0.07882434, -0.12715419, 0.2496311, 0.10338333, -0.2216095, 0.27942047, 0.28730366, -0.121507436, 0.23406708, 0.033301488, -0.11170986, -0.07598421, 0.22700192, 0.16831788, -0.1782246, 0.10436171, 0.5313916, -0.45197952, 0.08574493, 0.38023695, -0.37503973, 0.48294878, 0.395756, -0.06424203, -1.1014718, -0.43386197, -0.29926354, -0.5411267, -0.10062049, -0.20885082, 0.14253443, -0.26215184, 0.6703765, 0.17397788, 0.087858334, 0.03176336, 0.3718691, -0.40993366, 0.05416709, -1.2451315, 1.1417032, 0.25990725, -0.14561526, -0.39380634, 0.38070682, 0.42534453, -0.1419939, 0.5722067, -0.13041799, 0.037711337, 0.2232076, -2.6925328, 0.024700962, -0.1961928, 0.042838782, 0.63891196, -0.39222094, 0.31223664, -0.09477094, 0.18584296, 0.016821064, 0.3376296, 0.35219184, 0.4630382, 0.18875653, 0.37788606, -0.3353192, 0.047342606, 0.1568768, -0.14948027, 0.23301068, -0.14604992, 0.3462752, -0.49389037, 0.20150328, 0.47181952, -0.18184294, 1.4761697, 0.2948138, -0.01286719, 0.08452119, 0.104460135, 0.3652881, 0.42299202, -1.3019971, 0.7089439, 1.0235778, 0.32183632, -0.6596246, 0.1772392, -0.009945765, -0.12783358, 0.62207913, -0.49112907, -0.9466498, -1.0823333, -0.25960815, -0.41515926, 0.7067091, -1.0355426, 0.3503911, 0.35845396, 0.061461836, 0.39769354, 0.27901906, -0.31589267, 0.057645634, -0.3646935, -0.3506385, 0.16625588, -0.070771664, -0.24994616, 0.14341266, 0.41557333, -0.15259211, -0.08525595, 0.12392303, 0.28184325, -0.0068241656, 0.2882387, 0.7147884, 0.12267493, 0.46320865, -0.52501476, 0.5315519, 0.3264287, 0.14092495, -0.2848794, 0.4892692, 0.026441589, 0.09134558, -0.22009814, -0.44356743, 0.25479007, -0.3174067, 0.46472624, 0.2703563, -0.0113615915, -0.047648437, 0.65059406, 0.057057425, -0.025171313, -0.16499588, 0.029806003, -0.03870363, 0.073111564, -0.09480624, -2.260662, -0.07538688, -0.21682474, 0.08950377, -0.65170175, -0.31268, 0.32712188, 0.2348046, -0.98640954, -0.11943488, 0.11029488, 0.21336974, -0.017758317, 0.42380664, -0.3065644, -0.15052144, -0.05174133, -0.63555485, -0.3076751, -0.809074, -0.032883525, 0.13494056, 1.8258727, -0.15305848, 0.26801673, 0.40404734, 0.14198773, -0.29109862, -0.16910104, -0.21398617, -0.24191812, 0.08135325, -0.061301872, -0.07310236, 0.17505789, 0.16528726, -0.8996956, 0.0912467, 0.38715607, -0.007485971, -0.2645375, 0.26270953, -0.35516617, -0.15035588, 0.7220707, -0.05847383, -0.42381173, 0.35522386, -0.55758756, 0.13211256, -0.01017496, 0.10346767, 0.024454165, -0.41678366, 0.6808358, 0.12059994, -0.4792916, -0.0047300383, 0.34469417, -0.62780786, -0.26748335, -0.16392314, 0.1962165, 0.5359607, -0.24723297},
	}
)

var testEmbedder *Embedder

func setupTestEmbedder(t *testing.T) {
	if testEmbedder != nil {
		return
	}

	// Load tokenizer
	tok, err := pretrained.FromFile(tokenizerPath)
	if err != nil {
		t.Fatalf("failed to load tokenizer: %v", err)
	}

	embedder, err := NewEmbedder(modelPath, libraryPath, tok)
	if err != nil {
		t.Fatalf("Failed to create embedder: %v", err)
	}

	testEmbedder = embedder
}

func TestEmbedder(t *testing.T) {
	setupTestEmbedder(t)

	for text, expected := range embeddingMap {
		embedding, err := testEmbedder.Embed(text)
		if err != nil {
			t.Fatalf("Failed to embed text: %v", err)
		}

		assert.Equal(t, expected, embedding)
	}
}

func TestEmbedAll(t *testing.T) {
	setupTestEmbedder(t)

	texts := []string{}
	for k := range embeddingMap {
		texts = append(texts, k)
	}

	embeddings, err := testEmbedder.EmbedAll(texts)
	if err != nil {
		t.Fatalf("Failed to embed all texts: %v", err)
	}

	for i, embedding := range embeddings {
		assert.Equal(t, embeddingMap[texts[i]], embedding)
	}
}

func TestEmbedAllAndEmbedAreSame(t *testing.T) {
	setupTestEmbedder(t)

	numTests := 10
	allStrs := []string{}
	for i := 0; i < numTests; i++ {
		allStrs = append(allStrs, randomString(rand.Intn(100)))
	}

	embeddings, err := testEmbedder.EmbedAll(allStrs)
	if err != nil {
		t.Fatalf("Failed to embed all texts: %v", err)
	}

	for i, embedding := range embeddings {
		embedding2, err := testEmbedder.Embed(allStrs[i])
		if err != nil {
			t.Fatalf("Failed to embed text: %v", err)
		}
		assert.Equal(t, embedding, embedding2)
	}
}

func TestToInt64(t *testing.T) {
	values := []int{1, 2, 3}
	expected := []int64{1, 2, 3}
	assert.Equal(t, expected, toInt64(values))
}

func TestPrintEmbedding(t *testing.T) {
	embedding := []float32{1, 2, 3}
	err := printEmbedding(embedding)
	assert.NoError(t, err)
}

func randomString(n int) string {
	b := make([]byte, n)
	for i := range b {
		b[i] = byte(rand.Intn(26) + 65)
	}
	return string(b)
}
